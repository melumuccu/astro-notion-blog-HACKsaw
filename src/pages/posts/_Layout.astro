---
import GlobalLayout from '@/layouts/GlobalLayout.astro'
import PoweredBy from '../../components/PoweredBy.astro'
import SearchButton from '../../components/SearchButton.astro'
import SearchModal from '../../components/modal/SearchModal.astro'

import CoverImage from '../../components/CoverImage.astro'
import { getNavLink, getStaticFilePath } from '../../lib/blog-helpers.ts'
import { getDatabase } from '../../lib/notion/client.ts'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)
---

<GlobalLayout
  title={siteTitle}
  description={siteDescription}
  siteURL={siteURL}
  ogImage={ogImage}
  siteOGImage={siteOGImage}
>
  <div slot="body" class="container">
    <CoverImage Cover={database.Cover} />

    <div>
      <main>
        <div class="content">
          <header>
            <h1 class="zen-antique-soft-regular">
              <a href={getNavLink('/posts')}>
                {database.Title}
              </a>
            </h1>
            <div class="description">
              {database.Description}
            </div>
          </header>

          <slot name="main" />

          <footer>
            <PoweredBy />
          </footer>
        </div>
      </main>

      <aside>
        <SearchButton />
        <slot name="aside" />
      </aside>
    </div>

    <SearchModal />
  </div><!-- slot="body" -->
</GlobalLayout>

<style>
  :root {
    /* override */
    --fg: #333;
    --accents-1: #666;
    --accents-2: #666;
    --accents-3: #666;
  }
</style>

<style>
  .container {
    min-height: 100vh;
    background-color: rgb(var(--color--cafe-au-lait--rgb) / 15%);
  }

  .container > div {
    display: flex;
    max-width: 1280px;
  }

  @media (width <= 640px) {
    .container > div {
      display: block;
    }
  }

  @media (width <= 640px) {
    .container > header {
      --border-line-widrh: 6px;
    }
  }

  main {
    flex: 1;
    justify-content: space-between;
    order: 2;
  }

  @media (width <= 640px) {
    main {
      order: 1;
    }
  }

  aside {
    order: 1;
    width: 300px;
    padding: 52px 20px 20px;
    background-color: #bbbbbb4a;
  }

  @media (width <= 640px) {
    aside {
      order: 2;
      width: 100%;
    }
  }

  div.content {
    padding: 20px 40px;
  }

  @media (width <= 640px) {
    div.content {
      padding: 0 18px;
    }
  }

  main header {
    padding: 20px 0;
  }

  main header h1 {
    font-weight: 700;
    color: #333;
  }

  main header h1 a img {
    display: inline-block;
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.2em;
    margin-left: -0.3rem;
    font-size: 1.1em;
    vertical-align: sub;
  }

  main header h1 a img.custom-icon {
    border-radius: var(--radius);
  }

  main header div.description {
    padding: 0.3rem 0 0.6rem;
    font-size: 0.95rem;
  }

  main header h1 a span {
    display: inline-block;
    margin-right: 0.3em;
    margin-left: -0.1rem;
    font-size: 1.1em;
  }

  main header h1 a {
    display: block;
    color: inherit;
  }

  main header h1 a:hover {
    color: inherit;
  }

  .zen-antique-soft-regular {
    font-family: 'Zen Antique Soft', serif;
    font-style: normal;
    font-weight: 400;
  }
</style>
